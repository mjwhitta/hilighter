#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_color_func() {
    local color="$1"
    local func="$(echo "${color^}" | sed -r "s/_(.)/\u\1/g")"

    cat <<EOF
func $func(str string, args ...interface{}) string {
    return colorize("$color", str, args...)
}

func Print$func(str string, args ...interface{}) {
    fmt.Print(colorize("$color", str, args...))
}

func Println$func(str string, args ...interface{}) {
    fmt.Println(colorize("$color", str, args...))
}

EOF
}

generate_mode_func() {
    local mode="$1"
    local func="$(echo "${mode^}" | sed -r "s/_(.)/\u\1/g")"

    cat <<EOF
func $func(str string, args ...interface{}) string {
    return modify("$mode", str, args...)
}

EOF
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create autogenerated_colors.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("sed")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

colors_file="autogenerated_colors.go"
modes_file="autogenerated_modes.go"

cat >"$colors_file" <<EOF
// This file is autogenerated. Do not modify directly.
package hilighter

import "fmt"

$(
    for color in black red green yellow blue magenta cyan white; do
        generate_color_func "$color"
        generate_color_func "on_$color"
        generate_color_func "light_$color"
        generate_color_func "on_light_$color"
    done; unset color

    generate_color_func default
    generate_color_func on_default

    for i in $(seq -w 0 255); do
        generate_color_func "color_$i"
        generate_color_func "on_color_$i"
    done; unset i
)
EOF

cat >"$modes_file" <<EOF
// This file is autogenerated. Do not modify directly.
package hilighter
$(
    generate_mode_func reset
    generate_mode_func normal

    for mode in \
        bold dim faint italic underline blink blink_slow blink_rapid \
        inverse negative swap hide conceal crossed_out strikethrough \
        fraktur
    do
        generate_mode_func "$mode"
        generate_mode_func "no_$mode"
    done; unset mode
)
EOF

go fmt "$colors_file" "$modes_file"
