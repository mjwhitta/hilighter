#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_format_func() {
    local func="${1}f"
    local var="$2"
    local ret

    [[ $# -eq 2 ]] || ret="true"

    cat <<EOF
// $func wraps $1 and works with format
// strings.
func $func(${var:+$var, }str string, args ...interface{}) ${ret:+string }{
    ${ret:+return }$1(${var:+${var%% *}, }Sprintf(str, args...))
}
EOF
}

generate_funcs() {
    local code="$1"
    local func="$(echo "${code^}" | sed -r "s/_(.)/\u\1/g")"

    cat <<EOF
// $func will Hilight() the provided string with the
// specified ANSI code.
func $func(str string) string {
    return Hilight("$code", str)
}

// Print$func will Hilight() the provided string with the
// specified ANSI code and call fmt.Print(args ...interface{}).
func Print$func(str string) {
    Print(Hilight("$code", str))
}

// Println$func will Hilight() the provided string with the
// specified ANSI code and call fmt.Println(args ...interface{}).
func Println$func(str string) {
    Println(Hilight("$code", str))
}

$(
    generate_format_func "$func" "" "string"
    generate_format_func "Print$func" ""
    generate_format_func "Println$func" ""
)

EOF
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create autogenerated_colors.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")
deps+=("sed")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package hilighter

$(
    for color in black red green yellow blue magenta cyan white; do
        generate_funcs "$color"
        generate_funcs "on_$color"
        generate_funcs "light_$color"
        generate_funcs "on_light_$color"
    done; unset color

    generate_funcs default
    generate_funcs on_default

    for i in $(seq -w 0 255); do
        generate_funcs "color_$i"
        generate_funcs "on_color_$i"
    done; unset i
)

$(
    generate_funcs reset
    generate_funcs normal

    for mode in \
        bold dim faint italic underline blink blink_slow blink_rapid \
        inverse negative swap hide conceal crossed_out strikethrough \
        fraktur
    do
        generate_funcs "$mode"
        generate_funcs "no_$mode"
    done; unset mode
)

$(
    generate_format_func "Hex" "hex string" "string"
    generate_format_func "Hilight" "code string" "string"
    generate_format_func "Hilights" "codes []string" "string"
    generate_format_func "OnHex" "hex string" "string"
    generate_format_func "OnRainbow" "" "string"
    generate_format_func "Plain" "" "string"
    generate_format_func "Rainbow" "" "string"
    generate_format_func "Wrap" "width int" "string"

    generate_format_func "PrintHex" "hex string"
    generate_format_func "PrintOnHex" "hex string"
    generate_format_func "PrintlnHex" "hex string"
    generate_format_func "PrintlnOnHex" "hex string"

    generate_format_func "PrintHilight" "code string"
    generate_format_func "PrintlnHilight" "code string"

    generate_format_func "PrintHilights" "codes []string"
    generate_format_func "PrintlnHilights" "codes []string"

    generate_format_func "PrintRainbow" ""
    generate_format_func "PrintOnRainbow" ""
    generate_format_func "PrintlnRainbow" ""
    generate_format_func "PrintlnOnRainbow" ""

    generate_format_func "PrintWrap" "width int"
    generate_format_func "PrintlnWrap" "width int"
)
EOF

go fmt "$file"
